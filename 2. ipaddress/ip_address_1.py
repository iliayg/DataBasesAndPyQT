"""
Python для сетевых инженеров

Модуль ipaddress упрощает создание, редактирование, манипуляцию с IP-адресами
и сетями начиная с Python 3.3. (тогда он появился)

Классы и функции в этом модуле позволяют упростить решение различных задач,
связанных с IP-адресами. Например, проверка находятся ли два хоста в одной подсети,
возможность перебрать хосты в подсети, преобразование строки в IP-адрес.
"""

from ipaddress import ip_address

# Функция ipaddress.ip_address()
# позволяет создавать объект IPv4Address или IPv6Address

# создание IPv4-адреса
# протокол версии ip4 используется в старых виндовсах (до хр )
# а ip6 в висте и дальше, это для настройки сети и интернета

"""
в IPv6-адресе 128 бит представляет собой целых восемь 16-битных 16-теричных блоков, 
которые разделены двоеточиями. Пример: 2dfc:0:0:0:0217:cbff:fe8c:0. 
Если же говорить про адрес IPv4, то традиционной формой его записи является запись 
в виде 4-х десятичных чисел от 0 до 255, которые разделены точками, 
а через дробь обозначается длина маски подсети. Пример: 192.168.0.0/16
"""

IPV4 = ip_address('192.168.0.1')
print(IPV4)

# набор специальных методов и атрибутов
# 127.0.0.1 — это адрес интернет-протокола loopback (IP),
# также называемый «localhost». Адрес используется для установления
# соединения с тем же компьютером, который используется конечным пользователем.
# is_loopback - возвращает True, если находит loopback-адрес
print('is loopback:', IPV4.is_loopback)

# is_multicast - возвращает True, если находит multicast-адрес
# групповой адрес, определяющий группу станций локальной сети, одновременно получающих сообщение
print('is multicast:', IPV4.is_multicast)

# is_reserved - возвращает True, если находит IETF-зарезервированный адрес
# Инжене́рный сове́т Интерне́та (англ. Internet Engineering Task Force, IETF) —
# открытое международное сообщество проектировщиков, учёных, сетевых операторов и провайдеров,
# созданное IAB в 1986 году и занимающееся развитием протоколов и архитектуры Интернета.
print('is reserved:', IPV4.is_reserved)

# is_private - возвращает True, если адрес выделен для частных сетей
# Частный IP-адрес[1][2] (англ. private IP address), также называемый внутренним,
# внутрисетевым, локальным или «серым» — IP-адрес, принадлежащий к специальному диапазону,
# не используемому в сети Интернет. Такие адреса предназначены для применения в локальных сетях,
# распределение таких адресов никем не контролируется. В связи с дефицитом свободных IP-адресов,
# провайдеры всё чаще раздают своим абонентам именно внутрисетевые адреса,
# а не внешние, при этом один внешний айпи выдаётся нескольким клиентам.
print('is private:', IPV4.is_private)

# операции с объектами-адресами
IP1 = ip_address('192.168.1.0')
IP2 = ip_address('192.168.1.255')
# сравнение ip-адресов
if IP2 > IP1:
    print('IP1 > IP2:', True)
# конвертация ip-адреса в строку
print('convert to string:', str(IP1))
# конвертация ip-адреса в целое число
print('convert to int:', int(IP1))
# изменение идентификатора узла в сети
print('IP1 + 5:', IP1 + 5)
print('IP1 - 5:', IP1 - 5)
